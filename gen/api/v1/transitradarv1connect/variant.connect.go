// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/variant.proto

package transitradarv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/catouberos/transit-radar/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VariantServiceName is the fully-qualified name of the VariantService service.
	VariantServiceName = "api.v1.VariantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VariantServiceGetVariantProcedure is the fully-qualified name of the VariantService's GetVariant
	// RPC.
	VariantServiceGetVariantProcedure = "/api.v1.VariantService/GetVariant"
	// VariantServiceListVariantProcedure is the fully-qualified name of the VariantService's
	// ListVariant RPC.
	VariantServiceListVariantProcedure = "/api.v1.VariantService/ListVariant"
)

// VariantServiceClient is a client for the api.v1.VariantService service.
type VariantServiceClient interface {
	GetVariant(context.Context, *connect.Request[v1.GetVariantRequest]) (*connect.Response[v1.GetVariantResponse], error)
	ListVariant(context.Context, *connect.Request[v1.ListVariantRequest]) (*connect.Response[v1.ListVariantResponse], error)
}

// NewVariantServiceClient constructs a client for the api.v1.VariantService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVariantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VariantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	variantServiceMethods := v1.File_api_v1_variant_proto.Services().ByName("VariantService").Methods()
	return &variantServiceClient{
		getVariant: connect.NewClient[v1.GetVariantRequest, v1.GetVariantResponse](
			httpClient,
			baseURL+VariantServiceGetVariantProcedure,
			connect.WithSchema(variantServiceMethods.ByName("GetVariant")),
			connect.WithClientOptions(opts...),
		),
		listVariant: connect.NewClient[v1.ListVariantRequest, v1.ListVariantResponse](
			httpClient,
			baseURL+VariantServiceListVariantProcedure,
			connect.WithSchema(variantServiceMethods.ByName("ListVariant")),
			connect.WithClientOptions(opts...),
		),
	}
}

// variantServiceClient implements VariantServiceClient.
type variantServiceClient struct {
	getVariant  *connect.Client[v1.GetVariantRequest, v1.GetVariantResponse]
	listVariant *connect.Client[v1.ListVariantRequest, v1.ListVariantResponse]
}

// GetVariant calls api.v1.VariantService.GetVariant.
func (c *variantServiceClient) GetVariant(ctx context.Context, req *connect.Request[v1.GetVariantRequest]) (*connect.Response[v1.GetVariantResponse], error) {
	return c.getVariant.CallUnary(ctx, req)
}

// ListVariant calls api.v1.VariantService.ListVariant.
func (c *variantServiceClient) ListVariant(ctx context.Context, req *connect.Request[v1.ListVariantRequest]) (*connect.Response[v1.ListVariantResponse], error) {
	return c.listVariant.CallUnary(ctx, req)
}

// VariantServiceHandler is an implementation of the api.v1.VariantService service.
type VariantServiceHandler interface {
	GetVariant(context.Context, *connect.Request[v1.GetVariantRequest]) (*connect.Response[v1.GetVariantResponse], error)
	ListVariant(context.Context, *connect.Request[v1.ListVariantRequest]) (*connect.Response[v1.ListVariantResponse], error)
}

// NewVariantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVariantServiceHandler(svc VariantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	variantServiceMethods := v1.File_api_v1_variant_proto.Services().ByName("VariantService").Methods()
	variantServiceGetVariantHandler := connect.NewUnaryHandler(
		VariantServiceGetVariantProcedure,
		svc.GetVariant,
		connect.WithSchema(variantServiceMethods.ByName("GetVariant")),
		connect.WithHandlerOptions(opts...),
	)
	variantServiceListVariantHandler := connect.NewUnaryHandler(
		VariantServiceListVariantProcedure,
		svc.ListVariant,
		connect.WithSchema(variantServiceMethods.ByName("ListVariant")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.VariantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VariantServiceGetVariantProcedure:
			variantServiceGetVariantHandler.ServeHTTP(w, r)
		case VariantServiceListVariantProcedure:
			variantServiceListVariantHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVariantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVariantServiceHandler struct{}

func (UnimplementedVariantServiceHandler) GetVariant(context.Context, *connect.Request[v1.GetVariantRequest]) (*connect.Response[v1.GetVariantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VariantService.GetVariant is not implemented"))
}

func (UnimplementedVariantServiceHandler) ListVariant(context.Context, *connect.Request[v1.ListVariantRequest]) (*connect.Response[v1.ListVariantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VariantService.ListVariant is not implemented"))
}
