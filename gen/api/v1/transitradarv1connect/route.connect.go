// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/route.proto

package transitradarv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/catouberos/transit-radar/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RouteServiceName is the fully-qualified name of the RouteService service.
	RouteServiceName = "api.v1.RouteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RouteServiceGetRouteProcedure is the fully-qualified name of the RouteService's GetRoute RPC.
	RouteServiceGetRouteProcedure = "/api.v1.RouteService/GetRoute"
	// RouteServiceListRouteProcedure is the fully-qualified name of the RouteService's ListRoute RPC.
	RouteServiceListRouteProcedure = "/api.v1.RouteService/ListRoute"
)

// RouteServiceClient is a client for the api.v1.RouteService service.
type RouteServiceClient interface {
	GetRoute(context.Context, *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error)
	ListRoute(context.Context, *connect.Request[v1.ListRouteRequest]) (*connect.Response[v1.ListRouteResponse], error)
}

// NewRouteServiceClient constructs a client for the api.v1.RouteService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRouteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RouteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	routeServiceMethods := v1.File_api_v1_route_proto.Services().ByName("RouteService").Methods()
	return &routeServiceClient{
		getRoute: connect.NewClient[v1.GetRouteRequest, v1.GetRouteResponse](
			httpClient,
			baseURL+RouteServiceGetRouteProcedure,
			connect.WithSchema(routeServiceMethods.ByName("GetRoute")),
			connect.WithClientOptions(opts...),
		),
		listRoute: connect.NewClient[v1.ListRouteRequest, v1.ListRouteResponse](
			httpClient,
			baseURL+RouteServiceListRouteProcedure,
			connect.WithSchema(routeServiceMethods.ByName("ListRoute")),
			connect.WithClientOptions(opts...),
		),
	}
}

// routeServiceClient implements RouteServiceClient.
type routeServiceClient struct {
	getRoute  *connect.Client[v1.GetRouteRequest, v1.GetRouteResponse]
	listRoute *connect.Client[v1.ListRouteRequest, v1.ListRouteResponse]
}

// GetRoute calls api.v1.RouteService.GetRoute.
func (c *routeServiceClient) GetRoute(ctx context.Context, req *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error) {
	return c.getRoute.CallUnary(ctx, req)
}

// ListRoute calls api.v1.RouteService.ListRoute.
func (c *routeServiceClient) ListRoute(ctx context.Context, req *connect.Request[v1.ListRouteRequest]) (*connect.Response[v1.ListRouteResponse], error) {
	return c.listRoute.CallUnary(ctx, req)
}

// RouteServiceHandler is an implementation of the api.v1.RouteService service.
type RouteServiceHandler interface {
	GetRoute(context.Context, *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error)
	ListRoute(context.Context, *connect.Request[v1.ListRouteRequest]) (*connect.Response[v1.ListRouteResponse], error)
}

// NewRouteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRouteServiceHandler(svc RouteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routeServiceMethods := v1.File_api_v1_route_proto.Services().ByName("RouteService").Methods()
	routeServiceGetRouteHandler := connect.NewUnaryHandler(
		RouteServiceGetRouteProcedure,
		svc.GetRoute,
		connect.WithSchema(routeServiceMethods.ByName("GetRoute")),
		connect.WithHandlerOptions(opts...),
	)
	routeServiceListRouteHandler := connect.NewUnaryHandler(
		RouteServiceListRouteProcedure,
		svc.ListRoute,
		connect.WithSchema(routeServiceMethods.ByName("ListRoute")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.RouteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RouteServiceGetRouteProcedure:
			routeServiceGetRouteHandler.ServeHTTP(w, r)
		case RouteServiceListRouteProcedure:
			routeServiceListRouteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRouteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRouteServiceHandler struct{}

func (UnimplementedRouteServiceHandler) GetRoute(context.Context, *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RouteService.GetRoute is not implemented"))
}

func (UnimplementedRouteServiceHandler) ListRoute(context.Context, *connect.Request[v1.ListRouteRequest]) (*connect.Response[v1.ListRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RouteService.ListRoute is not implemented"))
}
