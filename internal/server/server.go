package server

import (
	"net/http"

	connectcors "connectrpc.com/cors"
	"github.com/rs/cors"

	"github.com/catouberos/transit-radar/gen/api/v1/transitradarv1connect" // generated by protoc-gen-connect-go
	"github.com/catouberos/transit-radar/internal/base"
)

type RPCServer struct {
	App *base.App

	ListenAddr string
}

func NewRPCServer(app *base.App, listenAddr string) *RPCServer {
	server := &RPCServer{App: app, ListenAddr: listenAddr}

	return server
}

func (s *RPCServer) Serve() error {
	mux := http.NewServeMux()

	path, handler := transitradarv1connect.NewGeolocationServiceHandler(s)
	mux.Handle(path, withCORS(handler))

	path, handler = transitradarv1connect.NewRouteServiceHandler(s)
	mux.Handle(path, withCORS(handler))

	path, handler = transitradarv1connect.NewVariantServiceHandler(s)
	mux.Handle(path, withCORS(handler))

	return http.ListenAndServe(s.ListenAddr, mux)
}

// withCORS adds CORS support to a Connect HTTP handler.
func withCORS(h http.Handler) http.Handler {
	middleware := cors.New(cors.Options{
		AllowedOrigins: []string{"*"},
		AllowedMethods: connectcors.AllowedMethods(),
		AllowedHeaders: connectcors.AllowedHeaders(),
		ExposedHeaders: connectcors.ExposedHeaders(),
	})
	return middleware.Handler(h)
}
